#TODO: install haproxy on VM2 
#TO EDIT: sudo vi /etc/haproxy/haproxy.cfg
#SEE IF CHANGES VALID: sudo haproxy -c -f /etc/haproxy/haproxy.cfg
#RESTART: sudo systemctl restart haproxy
global
    log /dev/log    local0
    log /dev/log    local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    #enable runtime API??????
    #stats socket /var/run/hapee-lb.sock mode 666 level admin
    #stats socket ipv4@127.0.0.1:9999 level admin
    #stats timeout 2m
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option forwardfor
    retries 3
    timeout connect 5000
    timeout client 50000
    timeout server 50000

#haProxy listens on port 5000 of VM2 and redirect  to backend servers

frontend http-in
#curl http://10.140.17.255:5000/heavy sends request to LB - haproxy listening on port 5000
    bind *:5000 
    acl heavy_job_path path_end /heavy
    acl medium_job_path path_end /medium
    acl light_job_path path_end /light

    use_backend heavy_servers if heavy_job_path
    use_backend medium_servers if medium_job_path
    use_backend light_servers if light_job_path

#VM1: 10.140.17.119
#to register a node curl http://PROXYIP:ProxyPort/register/nodeName/portNumber (proxy function)

#or add to config file
backend light_servers
    balance roundrobin
    option http-server-close
    option http-keep-alive
    #no server needed at the start - when sending request to RM - node added
    #ex. sever light_node1 10.140.17.119:15000 check inter 2000 rise 2 fall 3
    

#VM2: 10.140.17.255
backend medium_servers
    balance roundrobin
    option http-server-close
    option http-keep-alive
    #ex. medium_node1 light_node 10.140.17.255:15000 check inter 2000 rise 2 fall 3

    

#VM3 10.140.17.121
backend heavy_servers
    balance roundrobin
    option http-server-close
    option http-keep-alive
    #ex. sever heavy_node1 10.140.17.121:15000 check inter 2000 rise 2 fall 3
    
    
#balance options
#roundrobin: The default option, distributes requests evenly in a circular manner among all available servers.
#static-rr: Similar to roundrobin, but with static weighting. Each server is given a weight, and requests are distributed proportionally to each server's weight.
#leastconn: Distributes requests to the server with the fewest active connections. Useful for long-lived connections or slow clients.
